2024-10-28T15:24:18.464+05:30  INFO 29876 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 29876 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:24:18.482+05:30 DEBUG 29876 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:24:18.483+05:30  INFO 29876 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:24:19.355+05:30  INFO 29876 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:24:19.418+05:30  INFO 29876 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 54 ms. Found 3 JPA repository interfaces.
2024-10-28T15:24:20.353+05:30  INFO 29876 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:24:20.365+05:30  INFO 29876 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:24:20.366+05:30  INFO 29876 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:24:20.427+05:30  INFO 29876 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:24:20.427+05:30  INFO 29876 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1882 ms
2024-10-28T15:24:20.465+05:30  INFO 29876 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:24:20.621+05:30  INFO 29876 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:24:20.626+05:30  INFO 29876 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:24:20.636+05:30  INFO 29876 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:24:20.667+05:30  INFO 29876 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:24:20.805+05:30  INFO 29876 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:24:20.860+05:30  INFO 29876 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:24:20.888+05:30  INFO 29876 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:24:21.150+05:30  INFO 29876 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:24:21.780+05:30  INFO 29876 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:24:21.818+05:30  INFO 29876 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:24:22.181+05:30 DEBUG 29876 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:24:22.222+05:30  INFO 29876 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:24:22.235+05:30  INFO 29876 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:24:22.250+05:30  INFO 29876 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:24:22.251+05:30  WARN 29876 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:24:22.281+05:30  WARN 29876 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:24:22.541+05:30  INFO 29876 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:24:22.615+05:30 DEBUG 29876 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:24:23.026+05:30  WARN 29876 --- [CRUD] [main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2024-10-28T15:24:23.028+05:30  INFO 29876 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:24:23.034+05:30  INFO 29876 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2024-10-28T15:24:23.039+05:30  INFO 29876 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2024-10-28T15:24:23.051+05:30  INFO 29876 --- [CRUD] [main] .s.b.a.l.ConditionEvaluationReportLogger : 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-10-28T15:24:23.070+05:30 ERROR 29876 --- [CRUD] [main] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2024-10-28T15:24:41.813+05:30  INFO 30104 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 30104 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:24:41.815+05:30 DEBUG 30104 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:24:41.816+05:30  INFO 30104 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:24:42.353+05:30  INFO 30104 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:24:42.437+05:30  INFO 30104 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 72 ms. Found 3 JPA repository interfaces.
2024-10-28T15:24:43.286+05:30  INFO 30104 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:24:43.305+05:30  INFO 30104 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:24:43.307+05:30  INFO 30104 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:24:43.393+05:30  INFO 30104 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:24:43.394+05:30  INFO 30104 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1535 ms
2024-10-28T15:24:43.439+05:30  INFO 30104 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:24:43.613+05:30  INFO 30104 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:24:43.616+05:30  INFO 30104 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:24:43.631+05:30  INFO 30104 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:24:43.665+05:30  INFO 30104 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:24:43.802+05:30  INFO 30104 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:24:43.852+05:30  INFO 30104 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:24:43.881+05:30  INFO 30104 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:24:44.109+05:30  INFO 30104 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:24:44.674+05:30  INFO 30104 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:24:44.706+05:30  INFO 30104 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:24:45.051+05:30 DEBUG 30104 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:24:45.085+05:30  INFO 30104 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:24:45.098+05:30  INFO 30104 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:24:45.115+05:30  INFO 30104 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:24:45.117+05:30  WARN 30104 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:24:45.144+05:30  WARN 30104 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:24:45.458+05:30  INFO 30104 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:24:45.516+05:30 DEBUG 30104 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:24:45.758+05:30  INFO 30104 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:24:45.765+05:30  INFO 30104 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.282 seconds (process running for 4.695)
2024-10-28T15:24:52.957+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:24:52.957+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:24:52.957+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T15:24:52.980+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:24:52.999+05:30  WARN 30104 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:24:53.003+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:24:53.004+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:24:53.009+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:24:53.119+05:30  WARN 30104 --- [CRUD] [http-nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.spring.config.Role` from String "ROLE_MANAGEMENT": not one of the values accepted for Enum class: [TEACHER, STUDENT, MANAGEMENT]]
2024-10-28T15:24:53.128+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /error
2024-10-28T15:24:53.129+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /error
2024-10-28T15:24:53.162+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:25:05.991+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:25:05.991+05:30  WARN 30104 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:25:05.991+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:25:05.991+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:25:05.991+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:25:05.991+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:25:06.130+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:25:06.258+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:25:06.258+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:25:13.704+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:25:13.704+05:30  WARN 30104 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:25:13.704+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:25:13.704+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:25:13.704+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:25:13.719+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:25:14.091+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-3] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:25:14.145+05:30 DEBUG 30104 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:25:14.164+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5MzE0LCJleHAiOjE3MzAxMTI5MTR9.s3mFFxJPtsQr-nZ4081EJqgW0fpxfptU1qIskmr3jSE, expiration: Mon Oct 28 16:25:14 IST 2024
2024-10-28T15:25:14.164+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:25:14.164+05:30  INFO 30104 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:26:09.864+05:30  INFO 30348 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 30348 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:26:09.866+05:30 DEBUG 30348 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:26:09.867+05:30  INFO 30348 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:26:10.613+05:30  INFO 30348 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:26:10.722+05:30  INFO 30348 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 97 ms. Found 3 JPA repository interfaces.
2024-10-28T15:26:11.320+05:30  INFO 30348 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:26:11.335+05:30  INFO 30348 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:26:11.335+05:30  INFO 30348 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:26:11.398+05:30  INFO 30348 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:26:11.398+05:30  INFO 30348 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1485 ms
2024-10-28T15:26:11.447+05:30  INFO 30348 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:26:11.613+05:30  INFO 30348 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:26:11.616+05:30  INFO 30348 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:26:11.627+05:30  INFO 30348 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:26:11.675+05:30  INFO 30348 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:26:11.864+05:30  INFO 30348 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:26:11.928+05:30  INFO 30348 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:26:11.963+05:30  INFO 30348 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:26:12.241+05:30  INFO 30348 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:26:13.208+05:30  INFO 30348 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:26:13.251+05:30  INFO 30348 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:26:13.584+05:30 DEBUG 30348 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:26:13.625+05:30  INFO 30348 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:26:13.636+05:30  INFO 30348 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:26:13.649+05:30  INFO 30348 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:26:13.650+05:30  WARN 30348 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:26:13.681+05:30  WARN 30348 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:26:13.946+05:30  INFO 30348 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:26:13.989+05:30 DEBUG 30348 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:26:14.232+05:30  INFO 30348 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:26:14.244+05:30  INFO 30348 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 5.077 seconds (process running for 5.519)
2024-10-28T15:26:18.124+05:30  INFO 30348 --- [CRUD] [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:26:18.124+05:30  INFO 30348 --- [CRUD] [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:26:18.124+05:30  INFO 30348 --- [CRUD] [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T15:26:18.153+05:30 DEBUG 30348 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:26:18.164+05:30  WARN 30348 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:26:18.172+05:30 DEBUG 30348 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:26:18.174+05:30 DEBUG 30348 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:26:18.179+05:30 DEBUG 30348 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:26:18.313+05:30 DEBUG 30348 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:26:18.474+05:30 DEBUG 30348 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:26:18.593+05:30  INFO 30348 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:26:18.605+05:30  INFO 30348 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:28:52.102+05:30  INFO 25400 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 25400 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:28:52.106+05:30 DEBUG 25400 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:28:52.107+05:30  INFO 25400 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:28:52.746+05:30  INFO 25400 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:28:52.837+05:30  INFO 25400 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 80 ms. Found 3 JPA repository interfaces.
2024-10-28T15:28:53.866+05:30  INFO 25400 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:28:53.881+05:30  INFO 25400 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:28:53.882+05:30  INFO 25400 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:28:53.940+05:30  INFO 25400 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:28:53.941+05:30  INFO 25400 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1764 ms
2024-10-28T15:28:53.975+05:30  INFO 25400 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:28:54.115+05:30  INFO 25400 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:28:54.118+05:30  INFO 25400 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:28:54.128+05:30  INFO 25400 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:28:54.157+05:30  INFO 25400 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:28:54.290+05:30  INFO 25400 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:28:54.360+05:30  INFO 25400 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:28:54.403+05:30  INFO 25400 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:28:54.693+05:30  INFO 25400 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:28:55.368+05:30  INFO 25400 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:28:55.412+05:30  INFO 25400 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:28:55.753+05:30 DEBUG 25400 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:28:55.788+05:30  INFO 25400 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:28:55.811+05:30  INFO 25400 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:28:55.824+05:30  INFO 25400 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:28:55.824+05:30  WARN 25400 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:28:55.856+05:30  WARN 25400 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:28:56.100+05:30  INFO 25400 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:28:56.158+05:30 DEBUG 25400 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:28:56.400+05:30  INFO 25400 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:28:56.400+05:30  INFO 25400 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.74 seconds (process running for 5.225)
2024-10-28T15:29:04.407+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:29:04.408+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:29:04.410+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2024-10-28T15:29:04.430+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:29:04.441+05:30  WARN 25400 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:29:04.449+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:29:04.450+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:29:04.455+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:29:04.593+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:29:04.756+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:29:04.899+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:29:04.899+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:29:09.231+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:29:09.233+05:30  WARN 25400 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:29:09.234+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:29:09.235+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:29:09.236+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:29:09.239+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:29:09.662+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-3] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:29:09.704+05:30 DEBUG 25400 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:29:09.744+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NTQ5LCJleHAiOjE3MzAxMTMxNDl9.6dUp0dGXNysg-3h9pOB-2yyRTIDQ-hdXiUe-qHnSaUI, expiration: Mon Oct 28 16:29:09 IST 2024
2024-10-28T15:29:09.746+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:29:09.746+05:30  INFO 25400 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:32:09.920+05:30  INFO 27116 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 27116 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:32:09.923+05:30 DEBUG 27116 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:32:09.924+05:30  INFO 27116 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:32:10.497+05:30  INFO 27116 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:32:10.585+05:30  INFO 27116 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 78 ms. Found 3 JPA repository interfaces.
2024-10-28T15:32:11.077+05:30  INFO 27116 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:32:11.088+05:30  INFO 27116 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:32:11.090+05:30  INFO 27116 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:32:11.152+05:30  INFO 27116 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:32:11.153+05:30  INFO 27116 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1186 ms
2024-10-28T15:32:11.191+05:30  INFO 27116 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:32:11.358+05:30  INFO 27116 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:32:11.362+05:30  INFO 27116 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:32:11.376+05:30  INFO 27116 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:32:11.425+05:30  INFO 27116 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:32:11.575+05:30  INFO 27116 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:32:11.627+05:30  INFO 27116 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:32:11.658+05:30  INFO 27116 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:32:11.911+05:30  INFO 27116 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:32:12.551+05:30  INFO 27116 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:32:12.582+05:30  INFO 27116 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:32:12.876+05:30 DEBUG 27116 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:32:12.910+05:30  INFO 27116 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:32:12.923+05:30  INFO 27116 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:32:12.937+05:30  INFO 27116 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:32:12.938+05:30  WARN 27116 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:32:12.963+05:30  WARN 27116 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:32:13.196+05:30  INFO 27116 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:32:13.271+05:30 DEBUG 27116 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:32:13.720+05:30  INFO 27116 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:32:13.730+05:30  INFO 27116 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.184 seconds (process running for 4.685)
2024-10-28T15:32:22.422+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:32:22.422+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:32:22.422+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T15:32:22.439+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:32:22.455+05:30  WARN 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:32:22.458+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:32:22.458+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:32:22.467+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:32:22.577+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:32:22.721+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:32:22.871+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:32:22.871+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:32:27.421+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:32:27.421+05:30  WARN 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:32:27.421+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:32:27.421+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:32:27.421+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:32:27.421+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:32:27.804+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:32:27.837+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:32:27.884+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, expiration: Mon Oct 28 16:32:27 IST 2024
2024-10-28T15:32:27.887+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:32:27.887+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:33:03.890+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:33:03.891+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:03.891+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.906+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:03.926+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.928+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, username: sudharsanan
2024-10-28T15:33:03.928+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:33:03.987+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:03.989+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.990+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:03.992+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.992+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.994+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.995+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:03.996+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:03.997+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, expired: false
2024-10-28T15:33:03.997+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:33:03.998+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:33:03.998+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:33:04.000+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:33:04.004+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T15:33:04.085+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T15:33:04.087+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T15:33:11.352+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:33:11.353+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:11.354+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.354+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:11.356+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.356+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, username: sudharsanan
2024-10-28T15:33:11.357+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:33:11.360+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:11.360+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.361+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:11.362+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.363+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.364+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.365+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:11.366+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:11.366+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, expired: false
2024-10-28T15:33:11.367+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:33:11.367+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:33:11.367+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:33:11.368+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:33:11.371+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudharsanan
2024-10-28T15:33:11.444+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudharsanan registered successfully.
2024-10-28T15:33:11.445+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Teacher registered successfully: sudharsanan
2024-10-28T15:33:20.457+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T15:33:20.457+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:20.458+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.458+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:20.459+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.459+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, username: sudharsanan
2024-10-28T15:33:20.460+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:33:20.462+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:20.462+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.463+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:20.464+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.464+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.465+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.466+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:20.467+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk
2024-10-28T15:33:20.468+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5NzQ3LCJleHAiOjE3MzAxMTMzNDd9.y6UNLJyn4kK4W0-hTFeumDGupM5VMgL9e6j2Eirnqxk, expired: false
2024-10-28T15:33:20.469+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:33:20.470+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:33:20.470+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:33:20.471+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T15:33:20.473+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudharsanan
2024-10-28T15:33:20.545+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:20.546+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, expiration: Mon Oct 28 16:33:20 IST 2024
2024-10-28T15:33:20.547+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudharsanan
2024-10-28T15:33:37.999+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:33:38.001+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:38.002+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.003+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:38.005+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.006+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, username: sudharsanan
2024-10-28T15:33:38.007+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:33:38.011+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:38.013+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.013+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:38.015+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.016+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.016+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.017+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:38.017+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:38.018+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, expired: false
2024-10-28T15:33:38.019+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:33:38.020+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:33:38.021+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:33:38.022+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T15:33:42.548+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Securing GET /teachers/all
2024-10-28T15:33:42.549+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:42.549+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.550+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:42.551+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.551+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, username: sudharsanan
2024-10-28T15:33:42.552+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:33:42.555+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:33:42.555+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.556+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:42.557+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.558+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.559+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.559+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:33:42.560+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:33:42.560+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, expired: false
2024-10-28T15:33:42.561+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:33:42.562+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:33:42.562+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:33:42.563+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Secured GET /teachers/all
2024-10-28T15:33:42.564+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] c.e.spring.controller.TeacherController  : Received request to get all teachers
2024-10-28T15:33:42.565+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-8] c.example.spring.service.TeacherService  : TeacherService.getAllTeachers() => Fetching all teachers
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, username: sudharsanan
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.203+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:12.214+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.214+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.215+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.215+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:12.217+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE
2024-10-28T15:35:12.219+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTA5ODAwLCJleHAiOjE3MzAxMTM0MDB9.DDuKi_QWc0jmvAw3FXBJzSXJVgmmzx7xj_eALpq-kiE, expired: false
2024-10-28T15:35:12.220+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:35:12.220+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:35:12.220+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:35:12.220+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T15:35:29.519+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T15:35:29.519+05:30  WARN 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:35:29.519+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:35:29.519+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:35:29.519+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T15:35:29.519+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudhar
2024-10-28T15:35:29.586+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:29.602+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudhar, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU, expiration: Mon Oct 28 16:35:29 IST 2024
2024-10-28T15:35:29.602+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudhar
2024-10-28T15:35:50.608+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:35:50.610+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:35:50.610+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.610+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:50.610+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.610+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU, username: sudhar
2024-10-28T15:35:50.610+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T15:35:50.625+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:35:50.629+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.629+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:50.631+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.631+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.633+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.634+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:50.637+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:50.638+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU, expired: false
2024-10-28T15:35:50.639+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T15:35:50.639+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T15:35:50.640+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T15:35:50.645+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing GET /teachers/all
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU, username: sudhar
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.302+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:57.311+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.312+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.312+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.312+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:35:57.313+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU
2024-10-28T15:35:57.313+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDEwOTkyOSwiZXhwIjoxNzMwMTEzNTI5fQ.4nL6yOYRigDz__iDVZ9oM5M5gUksVM5m2UIvVLt1jFU, expired: false
2024-10-28T15:35:57.314+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T15:35:57.314+05:30  INFO 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T15:35:57.314+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T15:35:57.317+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.access.AccessDeniedHandlerImpl   : Responding with 403 status code
2024-10-28T15:35:57.324+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T15:35:57.324+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T15:35:57.327+05:30 DEBUG 27116 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:38:30.067+05:30  INFO 28024 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 28024 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:38:30.069+05:30 DEBUG 28024 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:38:30.070+05:30  INFO 28024 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:38:30.912+05:30  INFO 28024 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:38:30.985+05:30  INFO 28024 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 62 ms. Found 3 JPA repository interfaces.
2024-10-28T15:38:31.587+05:30  INFO 28024 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:38:31.614+05:30  INFO 28024 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:38:31.616+05:30  INFO 28024 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:38:31.673+05:30  INFO 28024 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:38:31.674+05:30  INFO 28024 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1560 ms
2024-10-28T15:38:31.719+05:30  INFO 28024 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:38:31.860+05:30  INFO 28024 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:38:31.863+05:30  INFO 28024 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:38:31.878+05:30  INFO 28024 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:38:31.907+05:30  INFO 28024 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:38:32.041+05:30  INFO 28024 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:38:32.104+05:30  INFO 28024 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:38:32.136+05:30  INFO 28024 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:38:32.379+05:30  INFO 28024 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:38:32.987+05:30  INFO 28024 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:38:33.014+05:30  INFO 28024 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:38:33.317+05:30 DEBUG 28024 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:38:33.353+05:30  INFO 28024 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:38:33.364+05:30  INFO 28024 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:38:33.378+05:30  INFO 28024 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:38:33.380+05:30  WARN 28024 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:38:33.416+05:30  WARN 28024 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:38:33.725+05:30  INFO 28024 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:38:33.789+05:30 DEBUG 28024 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:38:34.244+05:30  INFO 28024 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:38:34.255+05:30  INFO 28024 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.527 seconds (process running for 5.129)
2024-10-28T15:38:49.868+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:38:49.868+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:38:49.868+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T15:38:49.903+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:38:49.918+05:30  WARN 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:38:49.926+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:38:49.926+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:38:49.930+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:38:50.066+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:38:50.234+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:38:50.367+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:38:50.367+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:38:55.847+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:38:55.847+05:30  WARN 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:38:55.847+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:38:55.847+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:38:55.847+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:38:55.847+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:38:56.233+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:38:56.283+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:38:56.320+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, expiration: Mon Oct 28 16:38:56 IST 2024
2024-10-28T15:38:56.320+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:38:56.320+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:39:22.866+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:39:22.866+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:22.866+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.884+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:22.900+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.900+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, username: sudharsanan
2024-10-28T15:39:22.900+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:22.937+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, expired: false
2024-10-28T15:39:22.937+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:39:22.937+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:39:22.937+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:39:22.950+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:39:22.954+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T15:39:23.017+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T15:39:23.017+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, username: sudharsanan
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.435+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:28.445+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.445+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.445+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.446+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:28.449+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:28.449+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, expired: false
2024-10-28T15:39:28.450+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:39:28.451+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:39:28.451+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:39:28.452+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:39:28.453+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudharsanan
2024-10-28T15:39:28.517+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudharsanan registered successfully.
2024-10-28T15:39:28.517+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Teacher registered successfully: sudharsanan
2024-10-28T15:39:33.936+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing POST /management/teachers/all
2024-10-28T15:39:33.950+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:33.950+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.951+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:33.952+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.952+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, username: sudharsanan
2024-10-28T15:39:33.952+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:39:33.952+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:33.952+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.952+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:33.958+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.960+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.964+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.965+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:33.967+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:33.967+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, expired: false
2024-10-28T15:39:33.968+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:39:33.969+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:39:33.969+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:39:33.972+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured POST /management/teachers/all
2024-10-28T15:39:33.976+05:30  WARN 28024 --- [CRUD] [http-nio-8080-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2024-10-28T15:39:33.983+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing POST /error
2024-10-28T15:39:33.985+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured POST /error
2024-10-28T15:39:34.000+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-6] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing GET /management/teachers/all
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, username: sudharsanan
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.803+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:36.813+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.814+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.815+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.817+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:36.818+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:36.818+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, expired: false
2024-10-28T15:39:36.818+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:39:36.818+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:39:36.818+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:39:36.821+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured GET /management/teachers/all
2024-10-28T15:39:36.822+05:30  WARN 28024 --- [CRUD] [http-nio-8080-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2024-10-28T15:39:36.824+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T15:39:36.824+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T15:39:36.826+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Securing GET /management/teachers
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, username: sudharsanan
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.268+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:40.277+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.277+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.278+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.279+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:39:40.280+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc
2024-10-28T15:39:40.282+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMTM2LCJleHAiOjE3MzAxMTM3MzZ9.EeWz3q6PAJC78OFKmiqXHNVsGIRdTBDb_xmAhrtwoxc, expired: false
2024-10-28T15:39:40.283+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:39:40.284+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:39:40.284+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:39:40.285+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Secured GET /management/teachers
2024-10-28T15:40:06.217+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T15:40:06.217+05:30  WARN 28024 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:40:06.217+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:40:06.217+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:40:06.217+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T15:40:06.217+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudharsanan
2024-10-28T15:40:06.284+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:06.284+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, expiration: Mon Oct 28 16:40:06 IST 2024
2024-10-28T15:40:06.284+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudharsanan
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, username: sudharsanan
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.300+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:24.309+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.309+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.310+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.310+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:24.310+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:24.310+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, expired: false
2024-10-28T15:40:24.310+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:40:24.310+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:40:24.314+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:40:24.315+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T15:40:27.981+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing GET /teachers/all
2024-10-28T15:40:27.982+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:40:27.983+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:27.984+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:27.986+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:27.986+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, username: sudharsanan
2024-10-28T15:40:27.988+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:40:27.994+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:40:27.995+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:27.996+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:28.059+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:28.079+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:28.082+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:28.083+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:28.085+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:28.085+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, expired: false
2024-10-28T15:40:28.085+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:40:28.085+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:40:28.085+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:40:28.085+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured GET /teachers/all
2024-10-28T15:40:28.085+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] c.e.spring.controller.TeacherController  : Received request to get all teachers
2024-10-28T15:40:28.105+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-1] c.example.spring.service.TeacherService  : TeacherService.getAllTeachers() => Fetching all teachers
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing GET /teachers
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, username: sudharsanan
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.099+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:40.111+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.112+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.112+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.112+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:40.114+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ
2024-10-28T15:40:40.115+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjA2LCJleHAiOjE3MzAxMTM4MDZ9.puzuSqcR7a9wGLp4wzamzPdFyN0PPLx5zex01ysm2pQ, expired: false
2024-10-28T15:40:40.116+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:40:40.117+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:40:40.117+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:40:40.118+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured GET /teachers
2024-10-28T15:40:40.125+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T15:40:40.126+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T15:40:40.127+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:40:57.199+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T15:40:57.199+05:30  WARN 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:40:57.199+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:40:57.199+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:40:57.199+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T15:40:57.199+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudharsanan
2024-10-28T15:40:57.266+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:40:57.266+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y, expiration: Mon Oct 28 16:40:57 IST 2024
2024-10-28T15:40:57.266+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudharsanan
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y, username: sudharsanan
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.816+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:41:20.827+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.827+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.827+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.828+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:41:20.829+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:20.830+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y, expired: false
2024-10-28T15:41:20.830+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:41:20.831+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:41:20.832+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:41:20.833+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T15:41:25.723+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing GET /teachers/all
2024-10-28T15:41:25.723+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:41:25.723+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.723+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:41:25.723+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.730+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y, username: sudharsanan
2024-10-28T15:41:25.730+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:41:25.732+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:41:25.732+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.732+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:41:25.735+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y
2024-10-28T15:41:25.737+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwMjU3LCJleHAiOjE3MzAxMTM4NTd9.kMPHy_V-8JvXkiYGmsKoOupa9EeF-yu4Uhos3mVpF2Y, expired: false
2024-10-28T15:41:25.737+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:41:25.737+05:30  INFO 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured GET /teachers/all
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.TeacherController  : Received request to get all teachers
2024-10-28T15:41:25.737+05:30 DEBUG 28024 --- [CRUD] [http-nio-8080-exec-5] c.example.spring.service.TeacherService  : TeacherService.getAllTeachers() => Fetching all teachers
2024-10-28T15:43:01.306+05:30  INFO 29396 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 29396 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:43:01.308+05:30 DEBUG 29396 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:43:01.309+05:30  INFO 29396 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:43:01.980+05:30  INFO 29396 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:43:02.054+05:30  INFO 29396 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 64 ms. Found 3 JPA repository interfaces.
2024-10-28T15:43:02.706+05:30  INFO 29396 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:43:02.721+05:30  INFO 29396 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:43:02.722+05:30  INFO 29396 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:43:02.801+05:30  INFO 29396 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:43:02.802+05:30  INFO 29396 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1440 ms
2024-10-28T15:43:02.859+05:30  INFO 29396 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:43:03.043+05:30  INFO 29396 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:43:03.045+05:30  INFO 29396 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:43:03.054+05:30  INFO 29396 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:43:03.102+05:30  INFO 29396 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:43:03.240+05:30  INFO 29396 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:43:03.309+05:30  INFO 29396 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:43:03.384+05:30  INFO 29396 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:43:03.647+05:30  INFO 29396 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:43:04.403+05:30  INFO 29396 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:43:04.431+05:30  INFO 29396 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:43:04.793+05:30 DEBUG 29396 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:43:04.841+05:30  INFO 29396 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:43:04.858+05:30  INFO 29396 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:43:04.882+05:30  INFO 29396 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:43:04.884+05:30  WARN 29396 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:43:04.926+05:30  WARN 29396 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:43:05.211+05:30  INFO 29396 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:43:05.256+05:30 DEBUG 29396 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:43:05.482+05:30  INFO 29396 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:43:05.489+05:30  INFO 29396 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.508 seconds (process running for 4.881)
2024-10-28T15:43:18.412+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:43:18.414+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:43:18.416+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2024-10-28T15:43:18.437+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:43:18.443+05:30  WARN 29396 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:43:18.445+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:43:18.448+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:43:18.452+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:43:18.561+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:43:18.711+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:43:18.860+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:43:18.861+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:43:23.329+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:43:23.331+05:30  WARN 29396 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:43:23.331+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:43:23.332+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:43:23.332+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:43:23.334+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:43:23.726+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-1] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:43:23.769+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:43:23.818+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDAzLCJleHAiOjE3MzAxMTQwMDN9.ZdEuITUyTTc8_zkhZFDXagz_YW375GoUdBA1-1RUE1w, expiration: Mon Oct 28 16:43:23 IST 2024
2024-10-28T15:43:23.819+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:43:23.819+05:30  INFO 29396 --- [CRUD] [http-nio-8080-exec-1] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:43:41.716+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:43:41.716+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:43:41.716+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token:  eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDAzLCJleHAiOjE3MzAxMTQwMDN9.ZdEuITUyTTc8_zkhZFDXagz_YW375GoUdBA1-1RUE1w
2024-10-28T15:43:41.746+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:43:41.756+05:30 ERROR 29396 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : Error extracting username from token. Cause: Compact JWT strings may not contain whitespace.
2024-10-28T15:43:41.758+05:30 DEBUG 29396 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.handleUnauthorized(response, message) => message: Invalid or expired token.
2024-10-28T15:43:59.830+05:30  INFO 7936 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 7936 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:43:59.833+05:30 DEBUG 7936 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:43:59.834+05:30  INFO 7936 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:44:00.481+05:30  INFO 7936 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:44:00.549+05:30  INFO 7936 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 61 ms. Found 3 JPA repository interfaces.
2024-10-28T15:44:01.251+05:30  INFO 7936 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:44:01.271+05:30  INFO 7936 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:44:01.272+05:30  INFO 7936 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:44:01.339+05:30  INFO 7936 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:44:01.340+05:30  INFO 7936 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1461 ms
2024-10-28T15:44:01.381+05:30  INFO 7936 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:44:01.517+05:30  INFO 7936 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:44:01.520+05:30  INFO 7936 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:44:01.530+05:30  INFO 7936 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:44:01.564+05:30  INFO 7936 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:44:01.734+05:30  INFO 7936 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:44:01.796+05:30  INFO 7936 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:44:01.833+05:30  INFO 7936 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:44:02.133+05:30  INFO 7936 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:44:02.938+05:30  INFO 7936 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:44:03.004+05:30  INFO 7936 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:44:03.556+05:30 DEBUG 7936 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:44:03.612+05:30  INFO 7936 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:44:03.628+05:30  INFO 7936 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:44:03.650+05:30  INFO 7936 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:44:03.652+05:30  WARN 7936 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:44:03.693+05:30  WARN 7936 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:44:04.076+05:30  INFO 7936 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:44:04.169+05:30 DEBUG 7936 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:44:04.828+05:30  INFO 7936 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:44:04.841+05:30  INFO 7936 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 5.366 seconds (process running for 5.855)
2024-10-28T15:44:07.900+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:44:07.900+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:44:07.900+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T15:44:07.965+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:44:07.965+05:30  WARN 7936 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:44:07.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:44:07.983+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:44:07.986+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:44:08.098+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:44:08.248+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:44:08.365+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:44:08.365+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:44:15.534+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:44:15.534+05:30  WARN 7936 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:44:15.534+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:44:15.534+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:44:15.534+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:44:15.534+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:44:15.914+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-3] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:44:15.948+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:15.996+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, expiration: Mon Oct 28 16:44:15 IST 2024
2024-10-28T15:44:15.998+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:44:15.998+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:44:38.281+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:44:38.281+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:44:38.281+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.299+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:38.318+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.318+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, username: sudharsanan
2024-10-28T15:44:38.318+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:44:38.365+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:44:38.365+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.365+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:38.365+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.365+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.375+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.375+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:38.376+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:38.377+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, expired: false
2024-10-28T15:44:38.377+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:44:38.378+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:44:38.379+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:44:38.382+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:44:38.388+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T15:44:38.448+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T15:44:38.448+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, username: sudharsanan
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.814+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:46.827+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.828+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.829+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.831+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:46.832+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:46.835+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, expired: false
2024-10-28T15:44:46.835+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:44:46.835+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:44:46.835+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:44:46.836+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:44:46.838+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudharsanan
2024-10-28T15:44:46.898+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudharsanan registered successfully.
2024-10-28T15:44:46.898+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Teacher registered successfully: sudharsanan
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, username: sudharsanan
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.982+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:47.994+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.994+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.995+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.995+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:44:47.996+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:44:47.997+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, expired: false
2024-10-28T15:44:47.998+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:44:47.999+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:44:47.999+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:44:48.001+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:44:48.003+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudharsanan
2024-10-28T15:44:48.007+05:30 ERROR 7936 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher with username sudharsanan already exists.
2024-10-28T15:44:48.007+05:30 ERROR 7936 --- [CRUD] [http-nio-8080-exec-7] c.e.spring.controller.UserController     : Error registering teacher sudharsanan: Teacher with this username already exists.
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing GET /management/teachers/all
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, username: sudharsanan
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.664+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:00.676+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.676+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.677+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.677+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:00.679+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI
2024-10-28T15:45:00.680+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNDU1LCJleHAiOjE3MzAxMTQwNTV9.-xr3rkf0VwQp6eIIXOtaOcFSatScjGAMTzj9FTKdMpI, expired: false
2024-10-28T15:45:00.681+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:45:00.681+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:45:00.681+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:45:00.682+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured GET /management/teachers/all
2024-10-28T15:45:20.649+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T15:45:20.649+05:30  WARN 7936 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:45:20.649+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:45:20.649+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:45:20.649+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T15:45:20.649+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudharsanan
2024-10-28T15:45:20.724+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:20.725+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8, expiration: Mon Oct 28 16:45:20 IST 2024
2024-10-28T15:45:20.725+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudharsanan
2024-10-28T15:45:45.945+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:45:45.946+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:45:45.947+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.947+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:45.949+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.949+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8, username: sudharsanan
2024-10-28T15:45:45.950+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:45:45.952+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:45:45.952+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.952+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:45.953+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.954+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.954+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.955+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:45:45.955+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8
2024-10-28T15:45:45.956+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwNTIwLCJleHAiOjE3MzAxMTQxMjB9.021jOQ9qI__m4IQoLq_wqR6vJnojhtLNk88e6zWWlW8, expired: false
2024-10-28T15:45:45.956+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:45:45.956+05:30  INFO 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:45:45.956+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:45:45.957+05:30 DEBUG 7936 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T15:50:05.260+05:30  INFO 29228 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 29228 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T15:50:05.262+05:30 DEBUG 29228 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T15:50:05.263+05:30  INFO 29228 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T15:50:05.876+05:30  INFO 29228 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T15:50:05.954+05:30  INFO 29228 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 68 ms. Found 3 JPA repository interfaces.
2024-10-28T15:50:06.511+05:30  INFO 29228 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T15:50:06.524+05:30  INFO 29228 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T15:50:06.524+05:30  INFO 29228 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T15:50:06.584+05:30  INFO 29228 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T15:50:06.584+05:30  INFO 29228 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1281 ms
2024-10-28T15:50:06.618+05:30  INFO 29228 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T15:50:06.763+05:30  INFO 29228 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T15:50:06.766+05:30  INFO 29228 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T15:50:06.779+05:30  INFO 29228 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T15:50:06.803+05:30  INFO 29228 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T15:50:06.939+05:30  INFO 29228 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T15:50:06.978+05:30  INFO 29228 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T15:50:07.006+05:30  INFO 29228 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T15:50:07.241+05:30  INFO 29228 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T15:50:07.842+05:30  INFO 29228 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T15:50:07.871+05:30  INFO 29228 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T15:50:08.152+05:30 DEBUG 29228 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T15:50:08.187+05:30  INFO 29228 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T15:50:08.201+05:30  INFO 29228 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T15:50:08.217+05:30  INFO 29228 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T15:50:08.218+05:30  WARN 29228 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T15:50:08.245+05:30  WARN 29228 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T15:50:08.516+05:30  INFO 29228 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T15:50:08.570+05:30 DEBUG 29228 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T15:50:08.816+05:30  INFO 29228 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T15:50:08.824+05:30  INFO 29228 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.044 seconds (process running for 4.583)
2024-10-28T15:50:17.928+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T15:50:17.928+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T15:50:17.928+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T15:50:17.952+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T15:50:17.960+05:30  WARN 29228 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:50:17.965+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:50:17.965+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:50:17.969+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T15:50:18.049+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.registerUser() => Normalized username for registration: sudharsanan
2024-10-28T15:50:18.145+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T15:50:18.244+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.UserService   : UserService.registerUser() => User sudharsanan registered successfully.
2024-10-28T15:50:18.244+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-3] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T15:50:22.531+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T15:50:22.531+05:30  WARN 29228 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:50:22.531+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:50:22.531+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:50:22.531+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T15:50:22.531+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T15:50:22.878+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-5] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T15:50:22.912+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:50:22.933+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w, expiration: Mon Oct 28 16:50:22 IST 2024
2024-10-28T15:50:22.933+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T15:50:22.933+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T15:50:43.462+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T15:50:43.462+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:50:43.462+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.478+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:50:43.498+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.499+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w, username: sudharsanan
2024-10-28T15:50:43.500+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.545+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:50:43.559+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w
2024-10-28T15:50:43.560+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEwODIyLCJleHAiOjE3MzAxMTQ0MjJ9.L-xdLaaX-IVTtNn3uMHU7jRQRLqPQ2Nv_GK0qkJLf9w, expired: false
2024-10-28T15:50:43.560+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T15:50:43.561+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T15:50:43.562+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T15:50:43.564+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T15:50:43.567+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T15:50:43.640+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T15:50:43.640+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T15:50:57.279+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T15:50:57.279+05:30  WARN 29228 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T15:50:57.279+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T15:50:57.279+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T15:50:57.279+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T15:50:57.279+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudhar
2024-10-28T15:50:57.348+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:50:57.348+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudhar, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4, expiration: Mon Oct 28 16:50:57 IST 2024
2024-10-28T15:50:57.348+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudhar
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4, username: sudhar
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.177+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:51:20.189+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.190+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.190+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.191+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T15:51:20.192+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4
2024-10-28T15:51:20.192+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMDg1NywiZXhwIjoxNzMwMTE0NDU3fQ.nxSkzs5iw25QOfJGXgQ_R6l6Bpk7F89Ih5_KhWfCue4, expired: false
2024-10-28T15:51:20.193+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T15:51:20.194+05:30  INFO 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T15:51:20.194+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T15:51:20.196+05:30 DEBUG 29228 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T16:02:51.392+05:30  INFO 29808 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 29808 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T16:02:51.394+05:30 DEBUG 29808 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T16:02:51.395+05:30  INFO 29808 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T16:02:51.974+05:30  INFO 29808 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T16:02:52.042+05:30  INFO 29808 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 61 ms. Found 3 JPA repository interfaces.
2024-10-28T16:02:52.699+05:30  INFO 29808 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T16:02:52.726+05:30  INFO 29808 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T16:02:52.728+05:30  INFO 29808 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T16:02:52.809+05:30  INFO 29808 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T16:02:52.810+05:30  INFO 29808 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1365 ms
2024-10-28T16:02:52.860+05:30  INFO 29808 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T16:02:53.055+05:30  INFO 29808 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T16:02:53.058+05:30  INFO 29808 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T16:02:53.072+05:30  INFO 29808 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T16:02:53.120+05:30  INFO 29808 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T16:02:53.299+05:30  INFO 29808 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T16:02:53.399+05:30  INFO 29808 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T16:02:53.446+05:30  INFO 29808 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T16:02:53.723+05:30  INFO 29808 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T16:02:54.438+05:30  INFO 29808 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T16:02:54.476+05:30  INFO 29808 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T16:02:54.950+05:30 DEBUG 29808 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T16:02:54.995+05:30  INFO 29808 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T16:02:55.010+05:30  INFO 29808 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T16:02:55.028+05:30  INFO 29808 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T16:02:55.029+05:30  WARN 29808 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T16:02:55.051+05:30  WARN 29808 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T16:02:55.320+05:30  INFO 29808 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T16:02:55.384+05:30 DEBUG 29808 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T16:02:55.852+05:30  INFO 29808 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T16:02:55.866+05:30  INFO 29808 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.811 seconds (process running for 5.413)
2024-10-28T16:03:08.767+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T16:03:08.768+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T16:03:08.769+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2024-10-28T16:03:08.788+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T16:03:08.796+05:30  WARN 29808 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:03:08.798+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:03:08.799+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:03:08.801+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T16:03:08.887+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerManagement() => Normalized username for registration: sudharsanan
2024-10-28T16:03:09.015+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T16:03:09.106+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerManagement() => User sudharsanan registered successfully.
2024-10-28T16:03:09.107+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T16:03:16.154+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T16:03:16.155+05:30  WARN 29808 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:03:16.157+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:03:16.157+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:03:16.157+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T16:03:16.159+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T16:03:16.476+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-4] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T16:03:16.506+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:03:16.522+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNTk2LCJleHAiOjE3MzAxMTUxOTZ9.YhD-5dV6gGEvxKY6YmDLAofayH_rLzNvjpmr-09bK4Y, expiration: Mon Oct 28 17:03:16 IST 2024
2024-10-28T16:03:16.523+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T16:03:16.523+05:30  INFO 29808 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T16:03:35.222+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:03:35.222+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:03:35.222+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token:  eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNTk2LCJleHAiOjE3MzAxMTUxOTZ9.YhD-5dV6gGEvxKY6YmDLAofayH_rLzNvjpmr-09bK4Y
2024-10-28T16:03:35.240+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:03:35.245+05:30 ERROR 29808 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : Error extracting username from token. Cause: Compact JWT strings may not contain whitespace.
2024-10-28T16:03:35.247+05:30 DEBUG 29808 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.handleUnauthorized(response, message) => message: Invalid or expired token.
2024-10-28T16:04:01.453+05:30  INFO 31240 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 31240 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T16:04:01.455+05:30 DEBUG 31240 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T16:04:01.457+05:30  INFO 31240 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T16:04:02.141+05:30  INFO 31240 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T16:04:02.219+05:30  INFO 31240 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 60 ms. Found 3 JPA repository interfaces.
2024-10-28T16:04:02.800+05:30  INFO 31240 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T16:04:02.819+05:30  INFO 31240 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T16:04:02.820+05:30  INFO 31240 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T16:04:02.895+05:30  INFO 31240 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T16:04:02.896+05:30  INFO 31240 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1387 ms
2024-10-28T16:04:02.958+05:30  INFO 31240 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T16:04:03.243+05:30  INFO 31240 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T16:04:03.247+05:30  INFO 31240 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T16:04:03.258+05:30  INFO 31240 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T16:04:03.315+05:30  INFO 31240 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T16:04:03.541+05:30  INFO 31240 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T16:04:03.690+05:30  INFO 31240 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T16:04:03.766+05:30  INFO 31240 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T16:04:04.111+05:30  INFO 31240 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T16:04:04.780+05:30  INFO 31240 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T16:04:04.819+05:30  INFO 31240 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T16:04:05.381+05:30 DEBUG 31240 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T16:04:05.467+05:30  INFO 31240 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T16:04:05.499+05:30  INFO 31240 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T16:04:05.533+05:30  INFO 31240 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T16:04:05.534+05:30  WARN 31240 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T16:04:05.611+05:30  WARN 31240 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T16:04:06.126+05:30  INFO 31240 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T16:04:06.176+05:30 DEBUG 31240 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T16:04:06.477+05:30  INFO 31240 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T16:04:06.494+05:30  INFO 31240 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 5.402 seconds (process running for 5.841)
2024-10-28T16:04:22.394+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T16:04:22.394+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T16:04:22.394+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 0 ms
2024-10-28T16:04:22.405+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T16:04:22.420+05:30  WARN 31240 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:04:22.424+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:04:22.424+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:04:22.426+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T16:04:22.496+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerManagement() => Normalized username for registration: sudharsanan
2024-10-28T16:04:22.588+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T16:04:22.690+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerManagement() => User sudharsanan registered successfully.
2024-10-28T16:04:22.690+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T16:04:29.453+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T16:04:29.453+05:30  WARN 31240 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:04:29.453+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:04:29.453+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:04:29.453+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T16:04:29.453+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T16:04:29.771+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-1] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T16:04:29.792+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:04:29.805+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI, expiration: Mon Oct 28 17:04:29 IST 2024
2024-10-28T16:04:29.805+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T16:04:29.805+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-1] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T16:04:49.357+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:04:49.357+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:04:49.358+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.366+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:04:49.379+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.379+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI, username: sudharsanan
2024-10-28T16:04:49.380+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI
2024-10-28T16:04:49.408+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNjY5LCJleHAiOjE3MzAxMTUyNjl9.xsHzus60XklRC3f5G2b4_-r8R8z3WVxUNzDI4UKOblI, expired: false
2024-10-28T16:04:49.408+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:04:49.408+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:04:49.408+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:04:49.416+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T16:04:49.418+05:30 DEBUG 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T16:04:49.472+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T16:04:49.472+05:30  INFO 31240 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T16:06:16.074+05:30  INFO 24948 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 24948 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T16:06:16.076+05:30 DEBUG 24948 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T16:06:16.077+05:30  INFO 24948 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T16:06:16.839+05:30  INFO 24948 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T16:06:16.894+05:30  INFO 24948 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 47 ms. Found 3 JPA repository interfaces.
2024-10-28T16:06:17.623+05:30  INFO 24948 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T16:06:17.632+05:30  INFO 24948 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T16:06:17.633+05:30  INFO 24948 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T16:06:17.684+05:30  INFO 24948 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T16:06:17.686+05:30  INFO 24948 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1555 ms
2024-10-28T16:06:17.723+05:30  INFO 24948 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T16:06:17.912+05:30  INFO 24948 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T16:06:17.915+05:30  INFO 24948 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T16:06:17.925+05:30  INFO 24948 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T16:06:17.966+05:30  INFO 24948 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T16:06:18.132+05:30  INFO 24948 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T16:06:18.205+05:30  INFO 24948 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T16:06:18.240+05:30  INFO 24948 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T16:06:18.552+05:30  INFO 24948 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T16:06:19.563+05:30  INFO 24948 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T16:06:19.607+05:30  INFO 24948 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T16:06:20.017+05:30 DEBUG 24948 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T16:06:20.077+05:30  INFO 24948 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T16:06:20.097+05:30  INFO 24948 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T16:06:20.122+05:30  INFO 24948 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T16:06:20.124+05:30  WARN 24948 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T16:06:20.174+05:30  WARN 24948 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T16:06:20.614+05:30  INFO 24948 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T16:06:20.733+05:30 DEBUG 24948 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T16:06:21.266+05:30  INFO 24948 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T16:06:21.280+05:30  INFO 24948 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 5.631 seconds (process running for 6.112)
2024-10-28T16:06:24.021+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T16:06:24.022+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T16:06:24.024+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2024-10-28T16:06:24.045+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T16:06:24.058+05:30  WARN 24948 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:06:24.061+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:06:24.061+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:06:24.065+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T16:06:24.193+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.registerManagement() => Normalized username for registration: sudharsanan
2024-10-28T16:06:24.354+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T16:06:24.487+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.registerManagement() => User sudharsanan registered successfully.
2024-10-28T16:06:24.488+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-1] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T16:06:29.463+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T16:06:29.464+05:30  WARN 24948 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:06:29.464+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-6] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:06:29.464+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-6] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:06:29.465+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T16:06:29.467+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T16:06:29.858+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-6] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T16:06:29.904+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:29.933+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM, expiration: Mon Oct 28 17:06:29 IST 2024
2024-10-28T16:06:29.934+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T16:06:29.935+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-6] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T16:06:47.266+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:06:47.268+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:06:47.270+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.291+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:47.327+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.328+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM, username: sudharsanan
2024-10-28T16:06:47.328+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:06:47.367+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:06:47.370+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.372+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:47.373+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.374+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.375+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.376+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:47.377+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:47.377+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM, expired: false
2024-10-28T16:06:47.378+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:06:47.378+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:06:47.379+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:06:47.382+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T16:06:47.388+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T16:06:47.469+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T16:06:47.470+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM, username: sudharsanan
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.271+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:53.282+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.282+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.282+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.282+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:06:53.287+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:06:53.288+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM, expired: false
2024-10-28T16:06:53.289+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:06:53.289+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:06:53.290+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:06:53.290+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T16:06:53.292+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudhar
2024-10-28T16:06:53.294+05:30  WARN 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => User not found: sudhar
2024-10-28T16:06:53.294+05:30 ERROR 24948 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => Authentication failed for user: sudhar

java.lang.RuntimeException: User not found
	at com.example.spring.service.UserService.lambda$0(UserService.java:73) ~[classes/:na]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[na:na]
	at com.example.spring.service.UserService.verify(UserService.java:71) ~[classes/:na]
	at com.example.spring.controller.UserController.login(UserController.java:90) ~[classes/:na]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:181) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at com.example.spring.config.JwtFilter.doFilterInternal(JwtFilter.java:49) ~[classes/:na]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230) ~[spring-security-config-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

2024-10-28T16:06:53.313+05:30 ERROR 24948 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Login error for user sudhar: Authentication failed. Please check your credentials.
2024-10-28T16:07:01.137+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T16:07:01.137+05:30  WARN 24948 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:07:01.137+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:07:01.137+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:07:01.137+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T16:07:01.137+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudhar
2024-10-28T16:07:01.204+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:01.204+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudhar, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ, expiration: Mon Oct 28 17:07:01 IST 2024
2024-10-28T16:07:01.204+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudhar
2024-10-28T16:07:19.537+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /teachers/me
2024-10-28T16:07:19.543+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:07:19.543+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.543+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:19.543+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.543+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ, username: sudhar
2024-10-28T16:07:19.543+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:07:19.553+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:07:19.553+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.553+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:19.560+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.561+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.561+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.562+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:19.562+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:19.563+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ, expired: false
2024-10-28T16:07:19.563+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:07:19.563+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:07:19.564+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:07:19.564+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /teachers/me
2024-10-28T16:07:24.233+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-10] s.s.w.f.HttpStatusRequestRejectedHandler : Rejecting request due to: The request was rejected because the URL contained a potentially malicious String ";"

org.springframework.security.web.firewall.RequestRejectedException: The request was rejected because the URL contained a potentially malicious String ";"
	at org.springframework.security.web.firewall.StrictHttpFirewall.rejectedBlocklistedUrls(StrictHttpFirewall.java:539) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.firewall.StrictHttpFirewall.getFirewalledRequest(StrictHttpFirewall.java:509) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195) ~[spring-webmvc-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230) ~[spring-security-config-6.3.1.jar:6.3.1]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.11.jar:6.1.11]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.11.jar:6.1.11]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:389) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.26.jar:10.1.26]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

2024-10-28T16:07:24.251+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:07:24.251+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:07:24.251+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:07:24.251+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing GET /teachers/all
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ, username: sudhar
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.519+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:26.534+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.535+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.535+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.535+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:07:26.536+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ
2024-10-28T16:07:26.537+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMTgyMSwiZXhwIjoxNzMwMTE1NDIxfQ.CvlSKRR942Qe9vihN_plsQtotJ91F_JuKKWeiiwdBiQ, expired: false
2024-10-28T16:07:26.537+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:07:26.537+05:30  INFO 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:07:26.538+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:07:26.539+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.access.AccessDeniedHandlerImpl   : Responding with 403 status code
2024-10-28T16:07:26.540+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:07:26.541+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:07:26.544+05:30 DEBUG 24948 --- [CRUD] [http-nio-8080-exec-3] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:35:33.106+05:30  INFO 31668 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 31668 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T16:35:33.108+05:30 DEBUG 31668 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T16:35:33.110+05:30  INFO 31668 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T16:35:33.681+05:30  INFO 31668 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T16:35:33.740+05:30  INFO 31668 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 52 ms. Found 3 JPA repository interfaces.
2024-10-28T16:35:34.276+05:30  INFO 31668 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T16:35:34.288+05:30  INFO 31668 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T16:35:34.289+05:30  INFO 31668 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T16:35:34.353+05:30  INFO 31668 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T16:35:34.354+05:30  INFO 31668 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1196 ms
2024-10-28T16:35:34.385+05:30  INFO 31668 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T16:35:34.552+05:30  INFO 31668 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T16:35:34.556+05:30  INFO 31668 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T16:35:34.568+05:30  INFO 31668 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T16:35:34.594+05:30  INFO 31668 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T16:35:34.718+05:30  INFO 31668 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T16:35:34.779+05:30  INFO 31668 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T16:35:34.813+05:30  INFO 31668 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T16:35:35.073+05:30  INFO 31668 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T16:35:35.717+05:30  INFO 31668 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T16:35:35.748+05:30  INFO 31668 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T16:35:36.027+05:30 DEBUG 31668 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T16:35:36.059+05:30  INFO 31668 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T16:35:36.071+05:30  INFO 31668 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T16:35:36.084+05:30  INFO 31668 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T16:35:36.085+05:30  WARN 31668 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T16:35:36.117+05:30  WARN 31668 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T16:35:36.344+05:30  INFO 31668 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T16:35:36.408+05:30 DEBUG 31668 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T16:35:36.716+05:30  INFO 31668 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T16:35:36.723+05:30  INFO 31668 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 3.948 seconds (process running for 4.663)
2024-10-28T16:36:17.234+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T16:36:17.235+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T16:36:17.236+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2024-10-28T16:36:17.261+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:36:17.268+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:36:17.270+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTExNzg5LCJleHAiOjE3MzAxMTUzODl9.cD0Z7ntxlUMNpN0tOHIh2CqjbyBYDxUF-EuFhoMfngM
2024-10-28T16:36:17.338+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:36:17.417+05:30 ERROR 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Error extracting username from token. Cause: JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.
2024-10-28T16:36:17.420+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.handleUnauthorized(response, message) => message: Invalid or expired token.
2024-10-28T16:36:28.699+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T16:36:28.700+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:36:28.724+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:36:28.725+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:36:28.729+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T16:36:28.815+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerManagement() => Normalized username for registration: sudharsanan
2024-10-28T16:36:28.991+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T16:36:29.121+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.UserService   : UserService.registerManagement() => User sudharsanan registered successfully.
2024-10-28T16:36:29.123+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T16:36:36.271+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T16:36:36.272+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:36:36.273+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:36:36.273+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:36:36.274+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T16:36:36.276+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T16:36:36.663+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T16:36:36.670+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:36:36.688+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expiration: Mon Oct 28 17:36:36 IST 2024
2024-10-28T16:36:36.690+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T16:36:36.691+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T16:37:00.809+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:37:00.809+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:00.809+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.809+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:00.841+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.842+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:00.843+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:00.891+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:00.894+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:00.894+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:00.894+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:00.894+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:00.902+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:00.904+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T16:37:00.908+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T16:37:00.984+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T16:37:00.985+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.224+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:08.235+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.235+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.236+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.236+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:08.236+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:08.236+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:08.236+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:08.236+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:08.236+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:08.239+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T16:37:08.246+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudharsanan
2024-10-28T16:37:08.308+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudharsanan registered successfully.
2024-10-28T16:37:08.308+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] c.e.spring.controller.UserController     : Teacher registered successfully: sudharsanan
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing POST /users/registerStudent
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.308+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:19.320+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.320+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.321+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.322+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:19.323+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:19.324+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:19.324+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:19.325+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:19.325+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:19.326+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured POST /users/registerStudent
2024-10-28T16:37:19.392+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : Student sudhar registered successfully.
2024-10-28T16:37:19.392+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] c.e.spring.controller.UserController     : Student registered successfully: sudhar
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Securing POST /users/registerStudent
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:23.708+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.718+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.719+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.719+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:23.720+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:23.721+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:23.721+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:23.721+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:23.721+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:23.724+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Secured POST /users/registerStudent
2024-10-28T16:37:23.794+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.UserService   : Student sudhar1 registered successfully.
2024-10-28T16:37:23.794+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] c.e.spring.controller.UserController     : Student registered successfully: sudhar1
2024-10-28T16:37:31.576+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /management/teachers
2024-10-28T16:37:31.577+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:31.577+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.578+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:31.579+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.579+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:31.581+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:31.583+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:31.583+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.583+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:31.588+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.589+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.589+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.591+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:31.593+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:31.594+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:31.595+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:31.595+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:31.596+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:31.597+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /management/teachers
2024-10-28T16:37:31.602+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2024-10-28T16:37:31.618+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:37:31.620+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:37:31.636+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Securing GET /management/teachers/all
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.008+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:39.022+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.023+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.024+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.026+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:39.028+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:39.028+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:39.028+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:39.029+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:39.029+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:39.030+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Secured GET /management/teachers/all
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing GET /management/students
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, username: sudharsanan
2024-10-28T16:37:46.154+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:37:46.170+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:37:46.170+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.170+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:46.174+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.175+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.175+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.176+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:37:46.177+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU
2024-10-28T16:37:46.180+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTEzNTk2LCJleHAiOjE3MzAxMTcxOTZ9.YARfVocYqCY5Ky4CqCkx60ORPYlHOhibCpo7DZ4v2WU, expired: false
2024-10-28T16:37:46.180+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:37:46.180+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:37:46.180+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:37:46.181+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured GET /management/students
2024-10-28T16:38:04.458+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/login/student
2024-10-28T16:38:04.458+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:38:04.458+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:38:04.458+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:38:04.458+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /users/login/student
2024-10-28T16:38:04.525+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:04.525+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudhar1, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, expiration: Mon Oct 28 17:38:04 IST 2024
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing GET /students/me
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, username: sudhar1
2024-10-28T16:38:25.425+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar1
2024-10-28T16:38:25.439+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:25.439+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.440+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:25.441+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.441+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.441+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.441+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:25.441+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:25.443+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, expired: false
2024-10-28T16:38:25.443+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar1, valid: true
2024-10-28T16:38:25.443+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : User sudhar1 authenticated successfully.
2024-10-28T16:38:25.445+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: STUDENT
2024-10-28T16:38:25.446+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured GET /students/me
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing GET /student
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, username: sudhar1
2024-10-28T16:38:28.757+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar1
2024-10-28T16:38:28.772+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:28.772+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.772+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:28.779+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.781+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.782+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.782+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:28.783+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:28.785+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, expired: false
2024-10-28T16:38:28.785+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar1, valid: true
2024-10-28T16:38:28.786+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudhar1 authenticated successfully.
2024-10-28T16:38:28.786+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: STUDENT
2024-10-28T16:38:28.787+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured GET /student
2024-10-28T16:38:28.795+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:38:28.795+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:38:28.798+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-4] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing GET /students
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, username: sudhar1
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar1
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:30.132+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.133+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.133+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.133+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:30.135+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:30.135+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, expired: false
2024-10-28T16:38:30.136+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar1, valid: true
2024-10-28T16:38:30.136+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : User sudhar1 authenticated successfully.
2024-10-28T16:38:30.136+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: STUDENT
2024-10-28T16:38:30.137+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured GET /students
2024-10-28T16:38:30.139+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2024-10-28T16:38:30.142+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:38:30.142+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:38:30.144+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-5] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing GET /students/all
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, username: sudhar1
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar1
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.241+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:34.253+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.254+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.254+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.255+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:38:34.257+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c
2024-10-28T16:38:34.257+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiU1RVREVOVCIsInN1YiI6InN1ZGhhcjEiLCJpYXQiOjE3MzAxMTM2ODQsImV4cCI6MTczMDExNzI4NH0.smQU6BBIlnc-J9sH3GHmvR-8iLOoH0oJsZuwMfQS39c, expired: false
2024-10-28T16:38:34.257+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar1, valid: true
2024-10-28T16:38:34.257+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : User sudhar1 authenticated successfully.
2024-10-28T16:38:34.257+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: STUDENT
2024-10-28T16:38:34.257+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.s.w.access.AccessDeniedHandlerImpl   : Responding with 403 status code
2024-10-28T16:38:34.262+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:38:34.262+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:38:34.264+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-6] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:39:21.074+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing POST /users/login/teacher
2024-10-28T16:39:21.074+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:39:21.074+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:39:21.074+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:39:21.074+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured POST /users/login/teacher
2024-10-28T16:39:21.074+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Verifying teacher login for username: sudhar
2024-10-28T16:39:21.150+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:21.152+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudhar, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expiration: Mon Oct 28 17:39:21 IST 2024
2024-10-28T16:39:21.152+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.verifyTeacherLogin() => Token generated for teacher: sudhar
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Securing GET /teachers/students/all
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, username: sudhar
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.106+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:45.117+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.118+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.118+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.118+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:45.118+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:45.118+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expired: false
2024-10-28T16:39:45.118+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:39:45.121+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:39:45.122+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:39:45.124+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Secured GET /teachers/students/all
2024-10-28T16:39:45.129+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:39:45.129+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:39:45.132+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-8] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /teachers/students
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, username: sudhar
2024-10-28T16:39:49.391+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:39:49.401+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:39:49.406+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.407+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:49.409+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.410+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.410+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.411+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:39:49.412+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:39:49.412+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expired: false
2024-10-28T16:39:49.413+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:39:49.414+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:39:49.414+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:39:49.414+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /teachers/students
2024-10-28T16:39:49.417+05:30  WARN 31668 --- [CRUD] [http-nio-8080-exec-9] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2024-10-28T16:39:49.419+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:39:49.419+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:39:49.423+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-9] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:40:27.187+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Securing GET /teachers/students/all
2024-10-28T16:40:27.189+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:40:27.189+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.190+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:40:27.191+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.191+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, username: sudhar
2024-10-28T16:40:27.192+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:40:27.197+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:40:27.198+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.199+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:40:27.199+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.200+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.200+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.200+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:40:27.201+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:27.201+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expired: false
2024-10-28T16:40:27.202+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:40:27.202+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:40:27.202+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:40:27.202+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Secured GET /teachers/students/all
2024-10-28T16:40:27.206+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Securing GET /error
2024-10-28T16:40:27.206+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.security.web.FilterChainProxy        : Secured GET /error
2024-10-28T16:40:27.208+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-10] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Securing GET /students/all
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, username: sudhar
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:40:33.473+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expired: false
2024-10-28T16:40:33.473+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:40:33.473+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:40:33.473+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-3] o.s.security.web.FilterChainProxy        : Secured GET /students/all
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /students
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, username: sudhar
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:13.873+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expired: false
2024-10-28T16:41:13.873+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:41:13.873+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:41:13.873+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:41:13.888+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /students
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Securing GET /students/all
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, username: sudhar
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudhar
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc
2024-10-28T16:41:20.706+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiVEVBQ0hFUiIsInN1YiI6InN1ZGhhciIsImlhdCI6MTczMDExMzc2MSwiZXhwIjoxNzMwMTE3MzYxfQ.Db3U8BcFFy9XwptNRyW8g_Wr5vC-ysfdwNJHN30tjlc, expired: false
2024-10-28T16:41:20.706+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudhar, valid: true
2024-10-28T16:41:20.706+05:30  INFO 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : User sudhar authenticated successfully.
2024-10-28T16:41:20.706+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: TEACHER
2024-10-28T16:41:20.720+05:30 DEBUG 31668 --- [CRUD] [http-nio-8080-exec-2] o.s.security.web.FilterChainProxy        : Secured GET /students/all
2024-10-28T16:57:48.596+05:30  INFO 27064 --- [CRUD] [main] com.example.spring.ApplicationMain       : Starting ApplicationMain using Java 21.0.4 with PID 27064 (D:\CRUD-main\target\classes started by css160810 in D:\CRUD-main)
2024-10-28T16:57:48.598+05:30 DEBUG 27064 --- [CRUD] [main] com.example.spring.ApplicationMain       : Running with Spring Boot v3.3.2, Spring v6.1.11
2024-10-28T16:57:48.600+05:30  INFO 27064 --- [CRUD] [main] com.example.spring.ApplicationMain       : No active profile set, falling back to 1 default profile: "default"
2024-10-28T16:57:49.311+05:30  INFO 27064 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-10-28T16:57:49.378+05:30  INFO 27064 --- [CRUD] [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 59 ms. Found 3 JPA repository interfaces.
2024-10-28T16:57:49.967+05:30  INFO 27064 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2024-10-28T16:57:49.993+05:30  INFO 27064 --- [CRUD] [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2024-10-28T16:57:49.994+05:30  INFO 27064 --- [CRUD] [main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-10-28T16:57:50.078+05:30  INFO 27064 --- [CRUD] [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2024-10-28T16:57:50.079+05:30  INFO 27064 --- [CRUD] [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1435 ms
2024-10-28T16:57:50.138+05:30  INFO 27064 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-10-28T16:57:50.292+05:30  INFO 27064 --- [CRUD] [main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-10-28T16:57:50.294+05:30  INFO 27064 --- [CRUD] [main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-10-28T16:57:50.306+05:30  INFO 27064 --- [CRUD] [main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2024-10-28T16:57:50.338+05:30  INFO 27064 --- [CRUD] [main] com.example.spring.service.JWTService    : JWTService.JWTService() => Secret key generated successfully.
2024-10-28T16:57:50.471+05:30  INFO 27064 --- [CRUD] [main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-10-28T16:57:50.532+05:30  INFO 27064 --- [CRUD] [main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2024-10-28T16:57:50.563+05:30  INFO 27064 --- [CRUD] [main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-10-28T16:57:50.787+05:30  INFO 27064 --- [CRUD] [main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-10-28T16:57:51.444+05:30  INFO 27064 --- [CRUD] [main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-10-28T16:57:51.478+05:30  INFO 27064 --- [CRUD] [main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-10-28T16:57:51.926+05:30 DEBUG 27064 --- [CRUD] [main] com.example.spring.config.JwtFilter      : Filter 'jwtFilter' configured for use
2024-10-28T16:57:51.986+05:30  INFO 27064 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication manager.
2024-10-28T16:57:52.007+05:30  INFO 27064 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring authentication provider.
2024-10-28T16:57:52.029+05:30  INFO 27064 --- [CRUD] [main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2024-10-28T16:57:52.030+05:30  WARN 27064 --- [CRUD] [main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2024-10-28T16:57:52.075+05:30  WARN 27064 --- [CRUD] [main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-10-28T16:57:52.395+05:30  INFO 27064 --- [CRUD] [main] c.example.spring.config.SecurityConfig   : SecurityConfig: [Class: SecurityConfig] Configuring security filter chain.
2024-10-28T16:57:52.506+05:30 DEBUG 27064 --- [CRUD] [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtFilter, BasicAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2024-10-28T16:57:52.758+05:30  INFO 27064 --- [CRUD] [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2024-10-28T16:57:52.765+05:30  INFO 27064 --- [CRUD] [main] com.example.spring.ApplicationMain       : Started ApplicationMain in 4.513 seconds (process running for 4.973)
2024-10-28T16:58:10.718+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-10-28T16:58:10.719+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2024-10-28T16:58:10.720+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
2024-10-28T16:58:10.732+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Securing POST /users/registerManagement
2024-10-28T16:58:10.739+05:30  WARN 27064 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:58:10.742+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:58:10.742+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-1] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:58:10.745+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-1] o.s.security.web.FilterChainProxy        : Secured POST /users/registerManagement
2024-10-28T16:58:10.825+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.registerManagement() => Normalized username for registration: sudharsanan
2024-10-28T16:58:10.946+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.userExists() => Checking existence of user sudharsanan: false
2024-10-28T16:58:11.056+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-1] com.example.spring.service.UserService   : UserService.registerManagement() => User sudharsanan registered successfully.
2024-10-28T16:58:11.056+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-1] c.e.spring.controller.UserController     : Management user registered successfully: sudharsanan
2024-10-28T16:58:15.556+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Securing POST /users/login
2024-10-28T16:58:15.557+05:30  WARN 27064 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.config.JwtFilter      : Missing or malformed Authorization header.
2024-10-28T16:58:15.558+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.a.AnonymousAuthenticationFilter  : Set SecurityContextHolder to anonymous SecurityContext
2024-10-28T16:58:15.558+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-7] o.s.s.w.session.SessionManagementFilter  : Request requested invalid session id B53A0EE8889219A66D991308D3566F2B
2024-10-28T16:58:15.559+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-7] o.s.security.web.FilterChainProxy        : Secured POST /users/login
2024-10-28T16:58:15.561+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.verify() => Authenticating user: sudharsanan
2024-10-28T16:58:15.876+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-7] o.s.s.a.dao.DaoAuthenticationProvider    : Authenticated user
2024-10-28T16:58:15.904+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:58:15.921+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.JWTService    : JWTService.generateToken(username, role) => username: sudharsanan, token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY, expiration: Mon Oct 28 17:58:15 IST 2024
2024-10-28T16:58:15.922+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-7] com.example.spring.service.UserService   : UserService.verify() => Token generated for user: sudharsanan
2024-10-28T16:58:15.922+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-7] c.e.spring.controller.UserController     : User sudharsanan logged in successfully.
2024-10-28T16:58:38.000+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Securing POST /users/registerTeacher
2024-10-28T16:58:38.000+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:58:38.000+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.000+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:58:38.017+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.017+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.getUsernameFromToken(token, response) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY, username: sudharsanan
2024-10-28T16:58:38.026+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.authenticateUserIfNecessary(request, response, token, username) => username: sudharsanan
2024-10-28T16:58:38.054+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService: [Class: JWTService] Extracting username from token.
2024-10-28T16:58:38.054+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.055+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:58:38.055+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.056+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractExpiration(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.056+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractAllClaims(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.056+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.getKey() => Retrieving secret key.
2024-10-28T16:58:38.056+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.extractClaim(token, claimResolver) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY
2024-10-28T16:58:38.056+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.isTokenExpired(token) => token: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiTUFOQUdFTUVOVCIsInN1YiI6InN1ZGhhcnNhbmFuIiwiaWF0IjoxNzMwMTE0ODk1LCJleHAiOjE3MzAxMTg0OTV9.Qzowsb7ZU_tYRHEjCaxIkjTqR-0qeuPwCcVZM_pG6lY, expired: false
2024-10-28T16:58:38.056+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.JWTService    : JWTService.validateToken(token, userDetails) => userName: sudharsanan, valid: true
2024-10-28T16:58:38.056+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : User sudharsanan authenticated successfully.
2024-10-28T16:58:38.056+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.config.JwtFilter      : JwtFilter.logUserRoles(userDetails) => User has role: MANAGEMENT
2024-10-28T16:58:38.061+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] o.s.security.web.FilterChainProxy        : Secured POST /users/registerTeacher
2024-10-28T16:58:38.064+05:30 DEBUG 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Attempting to register teacher: sudhar
2024-10-28T16:58:38.126+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-4] com.example.spring.service.UserService   : UserService.registerTeacher() => Teacher sudhar registered successfully.
2024-10-28T16:58:38.126+05:30  INFO 27064 --- [CRUD] [http-nio-8080-exec-4] c.e.spring.controller.UserController     : Teacher registered successfully: sudhar
